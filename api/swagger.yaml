---
swagger: "2.0"
info:
  description: "An API that allows an external agent to recommend a change to an OnDemand\n\
    service. In this version, only bandwidth changes are supported.\nNote that this\
    \ API requires the caller to first login and obtain a token.\nThe token should\
    \ then be presented with each API call in the Authentication\nheader, with type\
    \ Bearer.\n"
  version: "2.0.0"
  title: "OnDemand Performance Recommendation API"
  contact:
    email: "simon.farrell@colt.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/simonfarrell/OnDemandPerformanceRecommendation/1.0.0"
tags:
- name: "standard"
  description: "Operations available to all"
schemes:
- "https"
paths:
  /login:
    post:
      tags:
      - "standard"
      summary: "login with a username and password"
      description: "returns a signed JWT"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "login"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "a signed JWT"
          schema:
            $ref: "#/definitions/Jwt"
        401:
          description: "login unsuccessful"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Standard"
  /refresh/{token}:
    post:
      tags:
      - "standard"
      summary: "refresh an existing JWT"
      description: "Refresh an unexpired token\n"
      operationId: "refreshToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "path"
        description: "the existing token"
        required: true
        type: "string"
        format: "base64"
      responses:
        200:
          description: "a signed JWT"
          schema:
            $ref: "#/definitions/Jwt"
        401:
          description: "login unsuccessful"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Standard"
  /performance/status:
    get:
      tags:
      - "standard"
      summary: "checks API availability"
      description: "Send a GET request with your API token to check both that the\
        \ token is recognised and that the API is up and running\n"
      operationId: "checkstatus"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "token is valid and API is available"
          schema:
            type: "object"
        403:
          description: "Missing or invalid signature"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "API not available"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Standard"
  /performance/recommendation/{recId}:
    get:
      tags:
      - "standard"
      summary: "get the state of a previously submitted recommendation"
      operationId: "getRecommendationStatus"
      produces:
      - "application/json"
      parameters:
      - name: "recId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "details of the recommendation"
          schema:
            $ref: "#/definitions/RecommendationState"
        403:
          description: "Missing or invalid signature"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Recommendation not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Standard"
  /performance/recommendation:
    post:
      tags:
      - "standard"
      summary: "submits a recommended action"
      description: "Adds a recommended action for a specified service"
      operationId: "submitRecommendation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "recommendation"
        description: "Recommendation being made"
        required: false
        schema:
          $ref: "#/definitions/Recommendation"
      responses:
        201:
          description: "Recommendation accepted"
          schema:
            $ref: "#/definitions/RecommendationResponse"
        400:
          description: "invalid input, object invalid"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "missing or invalid token"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "invalid service ID"
          schema:
            $ref: "#/definitions/Error"
        409:
          description: "a recommendation for this service is already pending"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Standard"
definitions:
  Login:
    type: "object"
    required:
    - "name"
    - "password"
    properties:
      name:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      name: "name"
  Jwt:
    type: "object"
    properties:
      expires:
        type: "string"
        format: "date-time"
      token:
        type: "string"
        format: "base64"
    example:
      expires: "2000-01-23T04:56:07.000+00:00"
      token: "token"
  Error:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
  Status:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        example: "OK"
  Recommendation:
    type: "object"
    required:
    - "action"
    - "service_id"
    properties:
      service_id:
        type: "string"
        example: "A1234"
      action:
        type: "string"
        enum:
        - "INCREASE_BANDWIDTH"
        - "DECREASE_BANDWIDTH"
      bandwidth_change:
        type: "integer"
        format: "int32"
        minimum: 100.0
        maximum: 1000.0
    example:
      bandwidth_change: 172
      service_id: "A1234"
      action: "INCREASE_BANDWIDTH"
  RecommendationResponse:
    type: "object"
    properties:
      recommendation_id:
        type: "string"
    example:
      recommendation_id: "recommendation_id"
  RecommendationState:
    type: "object"
    required:
    - "state"
    properties:
      state:
        $ref: "#/definitions/RecommendationStateValue"
    example:
      state: {}
  RecommendationStateValue:
    type: "string"
    enum:
    - "SUCCESS"
    - "REJECTED"
    - "PENDING"
    - "FAILED"
